c
JSON.parse(response.body)['error']['message']
JSON.parse(response.body)['error']
JSON.parse(response.body)
JSON.parse(response.body
c
e
context
context.error
c
ab
ab.include?({"line1_total_in"=>40,})
ab.includes?({"line1_total_in"=>40,})
ab.include?({"line1_total_in"=>40,})
ab = JSON.parse(response.body).first
JSON.parse(response.body).first
expect(JSON.parse(response.body).first).to be_hash_including([{"id"=>19,
          "line1_total_in"=>40,
          "line1_total_out"=>20,
          "line1_period_in"=>10,
          "line1_period_out"=>1234,
          "location_occupancy_pct"=>3.123}])
JSON.parse(response.body).first.class
JSON.parse(response.body).first
JSON.parse(response.body).first)
c
JSON.parse(response.body)
response.body
c
SensorDatum
response.status
response.body
c
 Sensor.create!(external_id:'qwer')
Sensor.all.count
Sensor.first
Sensor.last
 Sensor.create(external_id:'qwer')
Sensor.all.first
Sensor.all.count
response.body
c
response.body
response
c
response.body
response.status
c
response.body
c
ab =params.delete(:contextMap)
ab =params.delete('contextMap')
params.delete('contextMap')
params.delete_key('contextMap')
params.except('contextMap')
paramsparams.except('contextMap')
response.body
response
c
response.status
response.body
response
c
(data[:line1_total_in].to_i - data[:line1_total_out].to_i) / (max_capacity_number * one_hundred).to_f
(data[:line1_total_in].to_i - data[:line1_total_out])
c
context[:raw_sensor_data_attributes]
location_occupancy_pct = calculate_location_occupancy_pct(context[:raw_sensor_data_attributes], context[:sensor][:location_max_capacity])
 context[:raw_sensor_data_attributes].deep_transform_keys!(&:underscore)
c
post 'api/v1/create_sensor_data', params: params, headers: headers
c
location_occupancy_pct = calculate_location_occupancy_pct(context[:raw_sensor_data_attributes], context[:sensor][:location_max_capacity])
context[:raw_sensor_data_attributes].deep_transform_keys!(&:underscore)
c
response.body
response.status
post 'api/v1/create_sensor_data', params: params, headers: headers
response.body
c
context[:raw_sensor_data_attributes]
context[:raw_sensor_data_attributes].deep_transform_keys!(&:underscore)
context[:raw_sensor_data_attributes]
c
context[:raw_sensor_data_attributes]
location_occupancy_pct = calculate_location_occupancy_pct(context[:raw_sensor_data_attributes], context[:sensor][:location_max_capacity])
context[:raw_sensor_data_attributes]
context[:raw_sensor_data_attributes].deep_transform_keys!(&:underscore)
context[:raw_sensor_data_attributes]
c
params
c
context[:raw_sensor_data_attributes]
location_occupancy_pct = calculate_location_occupancy_pct(context[:raw_sensor_data_attributes], context[:sensor][:location_max_capacity])
context[:raw_sensor_data_attributes].deep_transform_keys!(&:underscore)
c
response.status
response.body
c
location_occupancy_pct = calculate_location_occupancy_pct(context[:raw_sensor_data_attributes], context[:sensor][:location_max_capacity])
context[:raw_sensor_data_attributes].deep_transform_keys!(&:underscore)
c
context.success?
context.sensor = sensor
sensor.update!(context.sensor_attributes)
sensor = Sensor.find_or_create_by(external_id: context.external_id)
c
service.errors
service.error
service.success?
service = service = SensorDataManager.call(external_id: params[:_id],
      sensor_attributes: filtered_sensor_attributes,
      raw_sensor_data_attributes: filtered_sensor_data_attributes
    )
service = _
service = SensorDataManager.call(external_id: params[:_id],
      sensor_attributes: filtered_sensor_attributes,
      raw_sensor_data_attributes: filtered_sensor_data_attributes
    )
c
post 'api/v1/create_sensor_data', params: params, headers: headers
c
response.status
response.body
c
response.status
response.body
response
c
response.body
response
response.
response.status
response.body
c
response.body
c
response.body
c
response.body
response
c
response.body
c
response.body
c
C
response.body
c
response.body
c
response.body
response
c
response.body
request.status
request.body.inspect
request
request.body
c
response.body
c
response.body
c
response.body
response.body.message
response.body
response
c
C
response.errors
response.error
response.message
response
post 'api/v1/create_sensor_data', params:, headers:
c
request
response
c
default_url_options
ActionDispatch::Integration::Runner::Capybara
Capybara
Capybara.app_hostdf
Capybara.app_host
c
root_url
create_sensor_data_path
create_sensor_data
api/v1/create_sensor_data_path
create_sensor_data_path
c
request
response
c
response
c
request
responsec
c
response
request
response
c
context.error
context.message
context
e.message
e
e..message
e.classe.message
e.class
e
c
service.error.class
service.error.error
service.errors
service.error
c
context.success?
context
c
context.c
context
c
context.error
context
c
data[:line1_total_in] 
data.class
data
data[:line1_total_in] - data[:line1_total_out]
(data[:line1_total_in] - data[:line1_total_out]).to_f / (max_capacity_number * one_hundred).to_f
one_hundred = 100
max_capacity_number = max_capacity.to_i
data = context[:raw_sensor_data_attributes]
data = context[:raw_sensor_data_attributes
max_capacity = context[:sensor][:location_max_capacity]
context[:sensor][:location_max_capacity]
context[:raw_sensor_data_attributes]
location_occupancy_pct = calculate_location_occupancy_pct(context[:raw_sensor_data_attributes], context[:sensor][:location_max_capacity])
context[:raw_sensor_data_attributes]
c
context.error
context.errors
context.success?
context.success
context
c
cc
c
sensor_attributes
c
context
c
context
c
